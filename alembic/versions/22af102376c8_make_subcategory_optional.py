"""Make subcategory optional

Revision ID: 22af102376c8
Revises: f9a881cade99
Create Date: 2025-08-28 21:31:15.913595

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '22af102376c8'
down_revision: Union[str, Sequence[str], None] = 'f9a881cade99'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_index(op.f('ix_users_id'), table_name='users')
    # op.drop_table('users')
    # op.drop_index(op.f('ix_categories_id'), table_name='categories')
    # op.drop_table('categories')
    # op.drop_table('agent_category_assignments')
    # op.drop_index(op.f('ix_tickets_id'), table_name='tickets')
    # op.drop_table('tickets')
    # op.drop_index(op.f('ix_ticket_transfers_id'), table_name='ticket_transfers')
    # op.drop_table('ticket_transfers')
    # op.drop_index(op.f('ix_messages_id'), table_name='messages')
    # op.drop_table('messages')
    # op.drop_index(op.f('ix_subcategories_id'), table_name='subcategories')
    # op.drop_table('subcategories')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('subcategories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('subcategories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='subcategories_category_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='subcategories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_subcategories_id'), 'subcategories', ['id'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ticket_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name=op.f('messages_sender_id_fkey')),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], name=op.f('messages_ticket_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('messages_pkey'))
    )
    op.create_index(op.f('ix_messages_id'), 'messages', ['id'], unique=False)
    op.create_table('ticket_transfers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ticket_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('from_agent_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('to_agent_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('request_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'approved', 'rejected', name='transferstatus'), autoincrement=False, nullable=False),
    sa.Column('requested_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('resolved_by_admin_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['from_agent_id'], ['users.id'], name=op.f('ticket_transfers_from_agent_id_fkey')),
    sa.ForeignKeyConstraint(['resolved_by_admin_id'], ['users.id'], name=op.f('ticket_transfers_resolved_by_admin_id_fkey')),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], name=op.f('ticket_transfers_ticket_id_fkey')),
    sa.ForeignKeyConstraint(['to_agent_id'], ['users.id'], name=op.f('ticket_transfers_to_agent_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ticket_transfers_pkey'))
    )
    op.create_index(op.f('ix_ticket_transfers_id'), 'ticket_transfers', ['id'], unique=False)
    op.create_table('tickets',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ticket_uid', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('subcategory_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('initial_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('open', 'assigned', 'in_progress', 'resolved', 'closed', 'reopened', name='ticketstatus'), autoincrement=False, nullable=False),
    sa.Column('priority', postgresql.ENUM('low', 'medium', 'high', 'urgent', name='ticketpriority'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], name=op.f('tickets_agent_id_fkey')),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name=op.f('tickets_category_id_fkey')),
    sa.ForeignKeyConstraint(['subcategory_id'], ['subcategories.id'], name=op.f('tickets_subcategory_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('tickets_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('tickets_pkey')),
    sa.UniqueConstraint('ticket_uid', name=op.f('tickets_ticket_uid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_tickets_id'), 'tickets', ['id'], unique=False)
    op.create_table('agent_category_assignments',
    sa.Column('agent_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], name=op.f('agent_category_assignments_agent_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name=op.f('agent_category_assignments_category_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('agent_id', 'category_id', name=op.f('agent_category_assignments_pkey'))
    )
    op.create_table('categories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('categories_pkey')),
    sa.UniqueConstraint('name', name=op.f('categories_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('user', 'agent', 'admin', name='userrole'), autoincrement=False, nullable=False),
    sa.Column('profile_photo_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey')),
    sa.UniqueConstraint('email', name=op.f('users_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###
